// @generated by protoc-gen-es v0.4.0 with parameter "target=ts"
// @generated from file notification.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum SendType
 */
export enum SendType {
  /**
   * @generated from enum value: Email = 0;
   */
  Email = 0,

  /**
   * @generated from enum value: Slack = 1;
   */
  Slack = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(SendType)
proto3.util.setEnumType(SendType, "SendType", [
  { no: 0, name: "Email" },
  { no: 1, name: "Slack" },
]);

/**
 * @generated from message SendNotificationRequest
 */
export class SendNotificationRequest extends Message<SendNotificationRequest> {
  /**
   * @generated from field: SendType type = 1;
   */
  type = SendType.Email;

  /**
   * @generated from field: string userID = 2;
   */
  userID = "";

  /**
   * @generated from field: string body = 3;
   */
  body = "";

  constructor(data?: PartialMessage<SendNotificationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "SendNotificationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(SendType) },
    { no: 2, name: "userID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendNotificationRequest {
    return new SendNotificationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendNotificationRequest {
    return new SendNotificationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendNotificationRequest {
    return new SendNotificationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SendNotificationRequest | PlainMessage<SendNotificationRequest> | undefined, b: SendNotificationRequest | PlainMessage<SendNotificationRequest> | undefined): boolean {
    return proto3.util.equals(SendNotificationRequest, a, b);
  }
}

/**
 * @generated from message SendNotificationResponse
 */
export class SendNotificationResponse extends Message<SendNotificationResponse> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<SendNotificationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "SendNotificationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendNotificationResponse {
    return new SendNotificationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendNotificationResponse {
    return new SendNotificationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendNotificationResponse {
    return new SendNotificationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SendNotificationResponse | PlainMessage<SendNotificationResponse> | undefined, b: SendNotificationResponse | PlainMessage<SendNotificationResponse> | undefined): boolean {
    return proto3.util.equals(SendNotificationResponse, a, b);
  }
}

