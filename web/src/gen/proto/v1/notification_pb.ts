// @generated by protoc-gen-es v0.4.0 with parameter "target=ts"
// @generated from file proto/v1/notification.proto (package proto.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum proto.v1.NotificationType
 */
export enum NotificationType {
  /**
   * @generated from enum value: NOTIFICATION_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: NOTIFICATION_TYPE_EMAIL = 1;
   */
  EMAIL = 1,

  /**
   * @generated from enum value: NOTIFICATION_TYPE_SLACK = 2;
   */
  SLACK = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(NotificationType)
proto3.util.setEnumType(NotificationType, "proto.v1.NotificationType", [
  { no: 0, name: "NOTIFICATION_TYPE_UNSPECIFIED" },
  { no: 1, name: "NOTIFICATION_TYPE_EMAIL" },
  { no: 2, name: "NOTIFICATION_TYPE_SLACK" },
]);

/**
 * @generated from message proto.v1.SendNotificationRequest
 */
export class SendNotificationRequest extends Message<SendNotificationRequest> {
  /**
   * @generated from field: proto.v1.NotificationType type = 1;
   */
  type = NotificationType.UNSPECIFIED;

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: string body = 3;
   */
  body = "";

  constructor(data?: PartialMessage<SendNotificationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "proto.v1.SendNotificationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(NotificationType) },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendNotificationRequest {
    return new SendNotificationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendNotificationRequest {
    return new SendNotificationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendNotificationRequest {
    return new SendNotificationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SendNotificationRequest | PlainMessage<SendNotificationRequest> | undefined, b: SendNotificationRequest | PlainMessage<SendNotificationRequest> | undefined): boolean {
    return proto3.util.equals(SendNotificationRequest, a, b);
  }
}

/**
 * @generated from message proto.v1.NotificationListRequest
 */
export class NotificationListRequest extends Message<NotificationListRequest> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<NotificationListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "proto.v1.NotificationListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotificationListRequest {
    return new NotificationListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotificationListRequest {
    return new NotificationListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotificationListRequest {
    return new NotificationListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NotificationListRequest | PlainMessage<NotificationListRequest> | undefined, b: NotificationListRequest | PlainMessage<NotificationListRequest> | undefined): boolean {
    return proto3.util.equals(NotificationListRequest, a, b);
  }
}

/**
 * @generated from message proto.v1.NotificationListResponse
 */
export class NotificationListResponse extends Message<NotificationListResponse> {
  /**
   * @generated from field: repeated proto.v1.Notification notifications = 1;
   */
  notifications: Notification[] = [];

  constructor(data?: PartialMessage<NotificationListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "proto.v1.NotificationListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "notifications", kind: "message", T: Notification, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotificationListResponse {
    return new NotificationListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotificationListResponse {
    return new NotificationListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotificationListResponse {
    return new NotificationListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: NotificationListResponse | PlainMessage<NotificationListResponse> | undefined, b: NotificationListResponse | PlainMessage<NotificationListResponse> | undefined): boolean {
    return proto3.util.equals(NotificationListResponse, a, b);
  }
}

/**
 * @generated from message proto.v1.Notification
 */
export class Notification extends Message<Notification> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: proto.v1.NotificationType type = 2;
   */
  type = NotificationType.UNSPECIFIED;

  /**
   * @generated from field: string body = 3;
   */
  body = "";

  constructor(data?: PartialMessage<Notification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "proto.v1.Notification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(NotificationType) },
    { no: 3, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Notification {
    return new Notification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Notification {
    return new Notification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Notification {
    return new Notification().fromJsonString(jsonString, options);
  }

  static equals(a: Notification | PlainMessage<Notification> | undefined, b: Notification | PlainMessage<Notification> | undefined): boolean {
    return proto3.util.equals(Notification, a, b);
  }
}

